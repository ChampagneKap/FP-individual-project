-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/haskell-project#readme</a>
@package haskell-project
@version 0.1.0.0


module Types

-- | This is the data structure that will represent a User
data User
User :: Int -> String -> String -> User

-- | The <a>userID</a> method returns the id by which a user is indexed
[userID] :: User -> Int

-- | The <a>firstName</a> method returns the first name of a user
[firstName] :: User -> String

-- | The <a>lastName</a> method returns the last name of a user
[lastName] :: User -> String

-- | This is the data structure that will represent a Message entry
data Message
Message :: Int -> String -> Int -> Int -> Message

-- | The <a>msgID</a> method returns the id of a message
[msgID] :: Message -> Int

-- | The <a>msgContent</a> method returns the content of a message
[msgContent] :: Message -> String

-- | The <a>userFrom</a> method returns the user a message was sent from
[userFrom] :: Message -> Int

-- | The <a>userTo</a> method returns the user a message was sent to
[userTo] :: Message -> Int
instance GHC.Classes.Eq Types.User
instance GHC.Show.Show Types.User
instance GHC.Classes.Eq Types.Message
instance GHC.Show.Show Types.Message
instance Database.SQLite.Simple.FromRow.FromRow Types.Message
instance Database.SQLite.Simple.ToRow.ToRow Types.Message


module Database

-- | The <a>initialiseDB</a> function prepares a database in the
--   `messages.sqlite` file to be used by the program
initialiseDB :: IO Connection

-- | The <a>saveMessage</a> function saves a given message into the
--   database
saveMessage :: Connection -> Message -> IO ()

-- | The <a>selectAllMessages</a> function gets the count of all messages
--   in the database
selectAllMessages :: Connection -> IO Int

-- | The <a>selectAllMessagesByUser</a> function gets the count of messages
--   sent and recevied by a given user and displays it to the program user
selectAllMessagesByUser :: Connection -> User -> IO ()

-- | The <a>selectEachMessageSent</a> function gets the count of each given
--   message and displays it to the program user
selectEachMessageSent :: Connection -> String -> IO ()
